name: Build
on: [push, pull_request]
env:
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
  CIBW_MANYLINUX_I686_IMAGE: manylinux2014
  CIBW_MANYLINUX_PYPY_X86_64_IMAGE: manylinux2014
  CIBW_MANYLINUX_PYPY_I686_IMAGE: manylinux2014

jobs:

  ######################################
  # JOB
  # Build binary wheels
  ######################################
  build_wheels:
    name: Build wheel ${{ matrix.os }} - ${{ matrix.python }} - ${{ matrix.architecture }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        architecture: [auto, aarch64]
        python: [36, 37, 38, 39, 310, 311]
        exclude:
          - os: windows-latest
            architecture: aarch64
          - os: macos-latest
            architecture: aarch64

    steps:
      - name: Set up QEMU
        if: contains(fromJson('["aarch64", "ppc64le", "s390x"]'), matrix.architecture)
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Get submodule tags
        run: |
          git submodule init
          git submodule update --recursive
          git submodule foreach --recursive 'git fetch --tags'
          git submodule update --recursive

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
          cache: pip

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.12.0

      - name: Build wheels for CPython ${{ matrix.python }}
        env:
          CIBW_BUILD: ${{ format('cp{0}-*', matrix.python) }}
          CIBW_ARCHS: ${{ matrix.architecture }}
          CIBW_SKIP: "*-musllinux*"
          CIBW_ENVIRONMENT: "${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')) && 'PYPIBUILD=1' || 'PYPIBUILD=1 PYPITEST=1' }}"
          CIBW_BEFORE_BUILD: bash scripts/compile.sh {package}
        run: |
          python -m cibuildwheel --output-dir wheelhouse brambox/

      - name: Store artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: wheelhouse/*.whl

  ######################################
  # JOB
  # Build linux source distribution
  ######################################
  build_sdist:
    name: Build source
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Get submodule tags
        run: |
          git submodule init
          git submodule update --recursive
          git submodule foreach --recursive 'git fetch --tags'
          git submodule update --recursive

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.6
          cache: pip

      - name: Build sdist
        env:
          PYPIBUILD: 1
          PYPITEST: "${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')) == 'false' && '1' || '0' }}"
        run: |
          python -m pip install numpy==1.13.3 cython==0.28.2
          cd brambox
          python setup.py sdist

      - name: Store artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: brambox/dist/*.tar.gz

  ######################################
  # JOB
  # Upload Test PyPI
  ######################################
  upload_test_pypi:
    name: Upload test PyPI servers
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/master')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist

      - name: Upload PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TEST_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          verbose: true

  ######################################
  # JOB
  # Upload PyPI
  ######################################
  upload_pypi:
    name: Upload PyPI servers
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist

      - name: Upload PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

  ######################################
  # JOB
  # Test PyPi install
  ######################################
  test_pypi:
    name: Test wheel ${{ matrix.os }} - ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    needs: [upload_test_pypi]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11"]
        exclude:
          - os: ubuntu-latest
            python: "3.6"
        include:
          - os: ubuntu-20.04
            python: "3.6"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: pip

      - name: Install package
        run: |
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple brambox

      - name: Run package
        run: |
          python -c "import brambox as bb; print(f'Brambox Version {bb.__version__}')"
